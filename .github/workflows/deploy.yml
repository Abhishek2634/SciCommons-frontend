name: Deploy Frontend to Arbutus Cloud Instance

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main # Runs this workflow on every push to the 'main' branch.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: m2b3/scicommons-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Set up Docker metadata (tags and labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 4: Build and push Docker image to GitHub Packages
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      # Step 5: Setup SSH keys and known_hosts
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # Step 6: Deploy Docker image to the VPS via SSH
      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Pull the latest image
            echo "Pulling the latest image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            
            # Check if the container exists
            if [ "$(docker ps -aq -f name=scicommons)" ]; then
              # Stop and remove the existing container
              echo "Stopping the existing container..."
              docker stop scicommons || true
              echo "Removing the existing container..."
              docker rm scicommons || true
            fi

            echo $NEXT_PUBLIC_BACKEND_URL
            # Run the new container
            docker run -d --name scicommons --env NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }} -p 80:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          EOF
