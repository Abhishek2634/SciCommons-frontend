/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  ArticleResponseSchema,
  ArticleSchema,
  ArticlesApiCreateArticleBody,
  ArticlesApiGetArticleParams,
  ReplyResponseSchema,
  ReplySchema,
  ReviewEditSchema,
  ReviewResponseSchema,
  ReviewSchema,
} from '.././schemas';

/**
 * @summary Create Article
 */
export const articlesApiCreateArticle = (
  articlesApiCreateArticleBody: ArticlesApiCreateArticleBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ArticleResponseSchema>> => {
  const formData = new FormData();
  formData.append('title', articlesApiCreateArticleBody.title);
  formData.append('abstract', articlesApiCreateArticleBody.abstract);
  formData.append('keywords', articlesApiCreateArticleBody.keywords);
  formData.append('authors', articlesApiCreateArticleBody.authors);
  formData.append('submission_type', articlesApiCreateArticleBody.submission_type);
  if (articlesApiCreateArticleBody.image_file !== undefined) {
    formData.append('image_file', articlesApiCreateArticleBody.image_file);
  }
  if (articlesApiCreateArticleBody.pdf_file !== undefined) {
    formData.append('pdf_file', articlesApiCreateArticleBody.pdf_file);
  }

  return axios.post(`http://localhost:8000/api/articles/articles/`, formData, options);
};

export const getArticlesApiCreateArticleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateArticle>>,
    TError,
    { data: ArticlesApiCreateArticleBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiCreateArticle>>,
  TError,
  { data: ArticlesApiCreateArticleBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiCreateArticle>>,
    { data: ArticlesApiCreateArticleBody }
  > = (props) => {
    const { data } = props ?? {};

    return articlesApiCreateArticle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiCreateArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiCreateArticle>>
>;
export type ArticlesApiCreateArticleMutationBody = ArticlesApiCreateArticleBody;
export type ArticlesApiCreateArticleMutationError = AxiosError<unknown>;

/**
 * @summary Create Article
 */
export const useArticlesApiCreateArticle = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateArticle>>,
    TError,
    { data: ArticlesApiCreateArticleBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiCreateArticle>>,
  TError,
  { data: ArticlesApiCreateArticleBody },
  TContext
> => {
  const mutationOptions = getArticlesApiCreateArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Article
 */
export const articlesApiGetArticle = (
  articleId: number,
  params?: ArticlesApiGetArticleParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ArticleSchema>> => {
  return axios.get(`http://localhost:8000/api/articles/articles/${articleId}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getArticlesApiGetArticleQueryKey = (
  articleId: number,
  params?: ArticlesApiGetArticleParams
) => {
  return [
    `http://localhost:8000/api/articles/articles/${articleId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getArticlesApiGetArticleQueryOptions = <
  TData = Awaited<ReturnType<typeof articlesApiGetArticle>>,
  TError = AxiosError<string>,
>(
  articleId: number,
  params?: ArticlesApiGetArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiGetArticle>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getArticlesApiGetArticleQueryKey(articleId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof articlesApiGetArticle>>> = ({ signal }) =>
    articlesApiGetArticle(articleId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!articleId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articlesApiGetArticle>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ArticlesApiGetArticleQueryResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiGetArticle>>
>;
export type ArticlesApiGetArticleQueryError = AxiosError<string>;

/**
 * @summary Get Article
 */
export const useArticlesApiGetArticle = <
  TData = Awaited<ReturnType<typeof articlesApiGetArticle>>,
  TError = AxiosError<string>,
>(
  articleId: number,
  params?: ArticlesApiGetArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiGetArticle>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getArticlesApiGetArticleQueryOptions(articleId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Review
 */
export const articlesApiCreateReview = (
  reviewSchema: ReviewSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReviewResponseSchema>> => {
  return axios.post(`http://localhost:8000/api/articles/reviews/`, reviewSchema, options);
};

export const getArticlesApiCreateReviewMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateReview>>,
    TError,
    { data: ReviewSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiCreateReview>>,
  TError,
  { data: ReviewSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiCreateReview>>,
    { data: ReviewSchema }
  > = (props) => {
    const { data } = props ?? {};

    return articlesApiCreateReview(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiCreateReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiCreateReview>>
>;
export type ArticlesApiCreateReviewMutationBody = ReviewSchema;
export type ArticlesApiCreateReviewMutationError = AxiosError<string>;

/**
 * @summary Create Review
 */
export const useArticlesApiCreateReview = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateReview>>,
    TError,
    { data: ReviewSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiCreateReview>>,
  TError,
  { data: ReviewSchema },
  TContext
> => {
  const mutationOptions = getArticlesApiCreateReviewMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Edit Review
 */
export const articlesApiEditReview = (
  reviewId: number,
  reviewEditSchema: ReviewEditSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReviewResponseSchema>> => {
  return axios.put(
    `http://localhost:8000/api/articles/reviews/${reviewId}/`,
    reviewEditSchema,
    options
  );
};

export const getArticlesApiEditReviewMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiEditReview>>,
    TError,
    { reviewId: number; data: ReviewEditSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiEditReview>>,
  TError,
  { reviewId: number; data: ReviewEditSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiEditReview>>,
    { reviewId: number; data: ReviewEditSchema }
  > = (props) => {
    const { reviewId, data } = props ?? {};

    return articlesApiEditReview(reviewId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiEditReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiEditReview>>
>;
export type ArticlesApiEditReviewMutationBody = ReviewEditSchema;
export type ArticlesApiEditReviewMutationError = AxiosError<string>;

/**
 * @summary Edit Review
 */
export const useArticlesApiEditReview = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiEditReview>>,
    TError,
    { reviewId: number; data: ReviewEditSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiEditReview>>,
  TError,
  { reviewId: number; data: ReviewEditSchema },
  TContext
> => {
  const mutationOptions = getArticlesApiEditReviewMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create Reply
 */
export const articlesApiCreateReply = (
  replySchema: ReplySchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReplyResponseSchema>> => {
  return axios.post(`http://localhost:8000/api/articles/replies/`, replySchema, options);
};

export const getArticlesApiCreateReplyMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateReply>>,
    TError,
    { data: ReplySchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiCreateReply>>,
  TError,
  { data: ReplySchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiCreateReply>>,
    { data: ReplySchema }
  > = (props) => {
    const { data } = props ?? {};

    return articlesApiCreateReply(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiCreateReplyMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiCreateReply>>
>;
export type ArticlesApiCreateReplyMutationBody = ReplySchema;
export type ArticlesApiCreateReplyMutationError = AxiosError<string>;

/**
 * @summary Create Reply
 */
export const useArticlesApiCreateReply = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateReply>>,
    TError,
    { data: ReplySchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiCreateReply>>,
  TError,
  { data: ReplySchema },
  TContext
> => {
  const mutationOptions = getArticlesApiCreateReplyMutationOptions(options);

  return useMutation(mutationOptions);
};
