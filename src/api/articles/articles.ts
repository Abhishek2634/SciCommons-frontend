/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  ArticleOut,
  ArticlesApiCreateArticleBody,
  ArticlesApiGetArticleParams,
  ArticlesApiGetArticlesParams,
  ArticlesApiUpdateArticleBody,
  Message,
  PaginatedArticlesResponse,
} from '.././schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Create Article
 */
export const articlesApiCreateArticle = (
  articlesApiCreateArticleBody: BodyType<ArticlesApiCreateArticleBody>,
  options?: SecondParameter<typeof customInstance>
) => {
  const formData = new FormData();
  if (articlesApiCreateArticleBody.image_file !== undefined) {
    formData.append('image_file', articlesApiCreateArticleBody.image_file);
  }
  articlesApiCreateArticleBody.pdf_files.forEach((value) => formData.append('pdf_files', value));
  formData.append('details', JSON.stringify(articlesApiCreateArticleBody.details));

  return customInstance<ArticleOut>(
    {
      url: `/api/articles/articles/`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options
  );
};

export const getArticlesApiCreateArticleMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateArticle>>,
    TError,
    { data: BodyType<ArticlesApiCreateArticleBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiCreateArticle>>,
  TError,
  { data: BodyType<ArticlesApiCreateArticleBody> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiCreateArticle>>,
    { data: BodyType<ArticlesApiCreateArticleBody> }
  > = (props) => {
    const { data } = props ?? {};

    return articlesApiCreateArticle(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiCreateArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiCreateArticle>>
>;
export type ArticlesApiCreateArticleMutationBody = BodyType<ArticlesApiCreateArticleBody>;
export type ArticlesApiCreateArticleMutationError = ErrorType<Message>;

/**
 * @summary Create Article
 */
export const useArticlesApiCreateArticle = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiCreateArticle>>,
    TError,
    { data: BodyType<ArticlesApiCreateArticleBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiCreateArticle>>,
  TError,
  { data: BodyType<ArticlesApiCreateArticleBody> },
  TContext
> => {
  const mutationOptions = getArticlesApiCreateArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Article
 */
export const articlesApiGetArticle = (
  articleSlug: string,
  params?: ArticlesApiGetArticleParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ArticleOut>(
    { url: `/api/articles/article/${articleSlug}`, method: 'GET', params, signal },
    options
  );
};

export const getArticlesApiGetArticleQueryKey = (
  articleSlug: string,
  params?: ArticlesApiGetArticleParams
) => {
  return [`/api/articles/article/${articleSlug}`, ...(params ? [params] : [])] as const;
};

export const getArticlesApiGetArticleQueryOptions = <
  TData = Awaited<ReturnType<typeof articlesApiGetArticle>>,
  TError = ErrorType<Message>,
>(
  articleSlug: string,
  params?: ArticlesApiGetArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiGetArticle>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getArticlesApiGetArticleQueryKey(articleSlug, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof articlesApiGetArticle>>> = ({ signal }) =>
    articlesApiGetArticle(articleSlug, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!articleSlug, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articlesApiGetArticle>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ArticlesApiGetArticleQueryResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiGetArticle>>
>;
export type ArticlesApiGetArticleQueryError = ErrorType<Message>;

/**
 * @summary Get Article
 */
export const useArticlesApiGetArticle = <
  TData = Awaited<ReturnType<typeof articlesApiGetArticle>>,
  TError = ErrorType<Message>,
>(
  articleSlug: string,
  params?: ArticlesApiGetArticleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiGetArticle>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getArticlesApiGetArticleQueryOptions(articleSlug, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update Article
 */
export const articlesApiUpdateArticle = (
  articleId: number,
  articlesApiUpdateArticleBody: BodyType<ArticlesApiUpdateArticleBody>,
  options?: SecondParameter<typeof customInstance>
) => {
  const formData = new FormData();
  if (articlesApiUpdateArticleBody.image_file !== undefined) {
    formData.append('image_file', articlesApiUpdateArticleBody.image_file);
  }
  formData.append('details', JSON.stringify(articlesApiUpdateArticleBody.details));

  return customInstance<ArticleOut>(
    {
      url: `/api/articles/${articleId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options
  );
};

export const getArticlesApiUpdateArticleMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiUpdateArticle>>,
    TError,
    { articleId: number; data: BodyType<ArticlesApiUpdateArticleBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiUpdateArticle>>,
  TError,
  { articleId: number; data: BodyType<ArticlesApiUpdateArticleBody> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiUpdateArticle>>,
    { articleId: number; data: BodyType<ArticlesApiUpdateArticleBody> }
  > = (props) => {
    const { articleId, data } = props ?? {};

    return articlesApiUpdateArticle(articleId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiUpdateArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiUpdateArticle>>
>;
export type ArticlesApiUpdateArticleMutationBody = BodyType<ArticlesApiUpdateArticleBody>;
export type ArticlesApiUpdateArticleMutationError = ErrorType<Message>;

/**
 * @summary Update Article
 */
export const useArticlesApiUpdateArticle = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiUpdateArticle>>,
    TError,
    { articleId: number; data: BodyType<ArticlesApiUpdateArticleBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiUpdateArticle>>,
  TError,
  { articleId: number; data: BodyType<ArticlesApiUpdateArticleBody> },
  TContext
> => {
  const mutationOptions = getArticlesApiUpdateArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Article
 */
export const articlesApiDeleteArticle = (
  articleId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>({ url: `/api/articles/${articleId}`, method: 'DELETE' }, options);
};

export const getArticlesApiDeleteArticleMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiDeleteArticle>>,
    TError,
    { articleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiDeleteArticle>>,
  TError,
  { articleId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiDeleteArticle>>,
    { articleId: number }
  > = (props) => {
    const { articleId } = props ?? {};

    return articlesApiDeleteArticle(articleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiDeleteArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiDeleteArticle>>
>;

export type ArticlesApiDeleteArticleMutationError = ErrorType<Message>;

/**
 * @summary Delete Article
 */
export const useArticlesApiDeleteArticle = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiDeleteArticle>>,
    TError,
    { articleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiDeleteArticle>>,
  TError,
  { articleId: number },
  TContext
> => {
  const mutationOptions = getArticlesApiDeleteArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Public Articles
 */
export const articlesApiGetArticles = (
  params?: ArticlesApiGetArticlesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedArticlesResponse>(
    { url: `/api/articles/`, method: 'GET', params, signal },
    options
  );
};

export const getArticlesApiGetArticlesQueryKey = (params?: ArticlesApiGetArticlesParams) => {
  return [`/api/articles/`, ...(params ? [params] : [])] as const;
};

export const getArticlesApiGetArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof articlesApiGetArticles>>,
  TError = ErrorType<Message>,
>(
  params?: ArticlesApiGetArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiGetArticles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getArticlesApiGetArticlesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof articlesApiGetArticles>>> = ({ signal }) =>
    articlesApiGetArticles(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articlesApiGetArticles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ArticlesApiGetArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiGetArticles>>
>;
export type ArticlesApiGetArticlesQueryError = ErrorType<Message>;

/**
 * @summary Get Public Articles
 */
export const useArticlesApiGetArticles = <
  TData = Awaited<ReturnType<typeof articlesApiGetArticles>>,
  TError = ErrorType<Message>,
>(
  params?: ArticlesApiGetArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiGetArticles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getArticlesApiGetArticlesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
