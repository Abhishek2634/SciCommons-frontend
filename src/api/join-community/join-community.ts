/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { JoinRequestSchema, Message } from '.././schemas';

/**
 * @summary Get Join Requests
 */
export const communitiesApiJoinGetJoinRequests = (
  communityName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<JoinRequestSchema[]>> => {
  return axios.get(`http://localhost:8000/api/communities/${communityName}/join-requests`, options);
};

export const getCommunitiesApiJoinGetJoinRequestsQueryKey = (communityName: string) => {
  return [`http://localhost:8000/api/communities/${communityName}/join-requests`] as const;
};

export const getCommunitiesApiJoinGetJoinRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiJoinGetJoinRequests>>,
  TError = AxiosError<Message>,
>(
  communityName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof communitiesApiJoinGetJoinRequests>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommunitiesApiJoinGetJoinRequestsQueryKey(communityName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof communitiesApiJoinGetJoinRequests>>> = ({
    signal,
  }) => communitiesApiJoinGetJoinRequests(communityName, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!communityName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiJoinGetJoinRequests>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiJoinGetJoinRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiJoinGetJoinRequests>>
>;
export type CommunitiesApiJoinGetJoinRequestsQueryError = AxiosError<Message>;

/**
 * @summary Get Join Requests
 */
export const useCommunitiesApiJoinGetJoinRequests = <
  TData = Awaited<ReturnType<typeof communitiesApiJoinGetJoinRequests>>,
  TError = AxiosError<Message>,
>(
  communityName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof communitiesApiJoinGetJoinRequests>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiJoinGetJoinRequestsQueryOptions(communityName, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Join Community
 */
export const communitiesApiJoinJoinCommunity = (
  communityId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Message>> => {
  return axios.post(
    `http://localhost:8000/api/communities/${communityId}/join`,
    undefined,
    options
  );
};

export const getCommunitiesApiJoinJoinCommunityMutationOptions = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiJoinJoinCommunity>>,
    TError,
    { communityId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiJoinJoinCommunity>>,
  TError,
  { communityId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiJoinJoinCommunity>>,
    { communityId: number }
  > = (props) => {
    const { communityId } = props ?? {};

    return communitiesApiJoinJoinCommunity(communityId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiJoinJoinCommunityMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiJoinJoinCommunity>>
>;

export type CommunitiesApiJoinJoinCommunityMutationError = AxiosError<Message>;

/**
 * @summary Join Community
 */
export const useCommunitiesApiJoinJoinCommunity = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiJoinJoinCommunity>>,
    TError,
    { communityId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiJoinJoinCommunity>>,
  TError,
  { communityId: number },
  TContext
> => {
  const mutationOptions = getCommunitiesApiJoinJoinCommunityMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Manage Join Request
 */
export const communitiesApiJoinManageJoinRequest = (
  communityId: number,
  joinRequestId: number,
  action: 'approve' | 'reject',
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Message>> => {
  return axios.post(
    `http://localhost:8000/api/communities/${communityId}/manage-join-request/${joinRequestId}/${action}`,
    undefined,
    options
  );
};

export const getCommunitiesApiJoinManageJoinRequestMutationOptions = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiJoinManageJoinRequest>>,
    TError,
    { communityId: number; joinRequestId: number; action: 'approve' | 'reject' },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiJoinManageJoinRequest>>,
  TError,
  { communityId: number; joinRequestId: number; action: 'approve' | 'reject' },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiJoinManageJoinRequest>>,
    { communityId: number; joinRequestId: number; action: 'approve' | 'reject' }
  > = (props) => {
    const { communityId, joinRequestId, action } = props ?? {};

    return communitiesApiJoinManageJoinRequest(communityId, joinRequestId, action, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiJoinManageJoinRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiJoinManageJoinRequest>>
>;

export type CommunitiesApiJoinManageJoinRequestMutationError = AxiosError<Message>;

/**
 * @summary Manage Join Request
 */
export const useCommunitiesApiJoinManageJoinRequest = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiJoinManageJoinRequest>>,
    TError,
    { communityId: number; joinRequestId: number; action: 'approve' | 'reject' },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiJoinManageJoinRequest>>,
  TError,
  { communityId: number; joinRequestId: number; action: 'approve' | 'reject' },
  TContext
> => {
  const mutationOptions = getCommunitiesApiJoinManageJoinRequestMutationOptions(options);

  return useMutation(mutationOptions);
};
