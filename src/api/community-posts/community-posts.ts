/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  ArticleDetails,
  ArticleResponseSchema,
  CommunitiesApiPostsCreateCommunityArticleBody,
  CommunitiesApiPostsGetCommunityArticlesParams,
  Message,
} from '.././schemas';

/**
 * Retrieves a list of articles associated with a specific community identified by
its id. The endpoint filters articles based on community visibility rules:

This endpoint supports filtering articles by search keywords, sorting
(latest, popular, older), and minimum rating.

Parameters:
    request (HttpRequest): The standard HttpRequest object.
    community_id (str): The id of the community for which to retrieve articles.
    search (str, optional): Keyword to filter articles based on their titles.
    Defaults to None.
    sort (str, equal to):
        - 'latest' - Orders articles by newest first.
        - 'popular' - Orders articles by popularity.
        - 'older' - Orders articles by oldest first.
    rating (int, optional): Filters articles that have a rating greater than
    or equal to the specified value.

Returns:
    List[ArticleSchema]: A list of articles that meet the criteria, serialized
    by ArticleSchema.
    HTTP 404: If the specified community does not exist.
    HTTP 500: If there is any other error during the retrieval process.
 * @summary Get articles in a community
 */
export const communitiesApiPostsGetCommunityArticles = (
  communityId: number,
  params?: CommunitiesApiPostsGetCommunityArticlesParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ArticleDetails[]>> => {
  return axios.get(`http://localhost:8000/api/communities/${communityId}/community_articles`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getCommunitiesApiPostsGetCommunityArticlesQueryKey = (
  communityId: number,
  params?: CommunitiesApiPostsGetCommunityArticlesParams
) => {
  return [
    `http://localhost:8000/api/communities/${communityId}/community_articles`,
    ...(params ? [params] : []),
  ] as const;
};

export const getCommunitiesApiPostsGetCommunityArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiPostsGetCommunityArticles>>,
  TError = AxiosError<Message>,
>(
  communityId: number,
  params?: CommunitiesApiPostsGetCommunityArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiPostsGetCommunityArticles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunitiesApiPostsGetCommunityArticlesQueryKey(communityId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiPostsGetCommunityArticles>>
  > = ({ signal }) =>
    communitiesApiPostsGetCommunityArticles(communityId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!communityId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiPostsGetCommunityArticles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiPostsGetCommunityArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiPostsGetCommunityArticles>>
>;
export type CommunitiesApiPostsGetCommunityArticlesQueryError = AxiosError<Message>;

/**
 * @summary Get articles in a community
 */
export const useCommunitiesApiPostsGetCommunityArticles = <
  TData = Awaited<ReturnType<typeof communitiesApiPostsGetCommunityArticles>>,
  TError = AxiosError<Message>,
>(
  communityId: number,
  params?: CommunitiesApiPostsGetCommunityArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiPostsGetCommunityArticles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiPostsGetCommunityArticlesQueryOptions(
    communityId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create an article in a community
 */
export const communitiesApiPostsCreateCommunityArticle = (
  communityName: string,
  communitiesApiPostsCreateCommunityArticleBody: CommunitiesApiPostsCreateCommunityArticleBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ArticleResponseSchema>> => {
  const formData = new FormData();
  if (communitiesApiPostsCreateCommunityArticleBody.image_file !== undefined) {
    formData.append('image_file', communitiesApiPostsCreateCommunityArticleBody.image_file);
  }
  if (communitiesApiPostsCreateCommunityArticleBody.pdf_file !== undefined) {
    formData.append('pdf_file', communitiesApiPostsCreateCommunityArticleBody.pdf_file);
  }
  formData.append('details', JSON.stringify(communitiesApiPostsCreateCommunityArticleBody.details));

  return axios.post(
    `http://localhost:8000/api/communities/${communityName}/create_community_article`,
    formData,
    options
  );
};

export const getCommunitiesApiPostsCreateCommunityArticleMutationOptions = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiPostsCreateCommunityArticle>>,
    TError,
    { communityName: string; data: CommunitiesApiPostsCreateCommunityArticleBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiPostsCreateCommunityArticle>>,
  TError,
  { communityName: string; data: CommunitiesApiPostsCreateCommunityArticleBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiPostsCreateCommunityArticle>>,
    { communityName: string; data: CommunitiesApiPostsCreateCommunityArticleBody }
  > = (props) => {
    const { communityName, data } = props ?? {};

    return communitiesApiPostsCreateCommunityArticle(communityName, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiPostsCreateCommunityArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiPostsCreateCommunityArticle>>
>;
export type CommunitiesApiPostsCreateCommunityArticleMutationBody =
  CommunitiesApiPostsCreateCommunityArticleBody;
export type CommunitiesApiPostsCreateCommunityArticleMutationError = AxiosError<Message>;

/**
 * @summary Create an article in a community
 */
export const useCommunitiesApiPostsCreateCommunityArticle = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiPostsCreateCommunityArticle>>,
    TError,
    { communityName: string; data: CommunitiesApiPostsCreateCommunityArticleBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiPostsCreateCommunityArticle>>,
  TError,
  { communityName: string; data: CommunitiesApiPostsCreateCommunityArticleBody },
  TContext
> => {
  const mutationOptions = getCommunitiesApiPostsCreateCommunityArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Submit Article To Community
 */
export const communitiesApiPostsSubmitArticleToCommunity = (
  articleSlug: string,
  communityName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ArticleResponseSchema>> => {
  return axios.post(
    `http://localhost:8000/api/communities/submit-article/${articleSlug}/${communityName}`,
    undefined,
    options
  );
};

export const getCommunitiesApiPostsSubmitArticleToCommunityMutationOptions = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiPostsSubmitArticleToCommunity>>,
    TError,
    { articleSlug: string; communityName: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiPostsSubmitArticleToCommunity>>,
  TError,
  { articleSlug: string; communityName: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiPostsSubmitArticleToCommunity>>,
    { articleSlug: string; communityName: string }
  > = (props) => {
    const { articleSlug, communityName } = props ?? {};

    return communitiesApiPostsSubmitArticleToCommunity(articleSlug, communityName, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiPostsSubmitArticleToCommunityMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiPostsSubmitArticleToCommunity>>
>;

export type CommunitiesApiPostsSubmitArticleToCommunityMutationError = AxiosError<Message>;

/**
 * @summary Submit Article To Community
 */
export const useCommunitiesApiPostsSubmitArticleToCommunity = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiPostsSubmitArticleToCommunity>>,
    TError,
    { articleSlug: string; communityName: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiPostsSubmitArticleToCommunity>>,
  TError,
  { articleSlug: string; communityName: string },
  TContext
> => {
  const mutationOptions = getCommunitiesApiPostsSubmitArticleToCommunityMutationOptions(options);

  return useMutation(mutationOptions);
};
