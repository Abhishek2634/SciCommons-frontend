/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  ArticleOut,
  ArticleStatusSchema,
  AssessmentSubmissionSchema,
  AssessorArticleSchema,
  AssessorSchema,
  CommunitiesApiArticlesListCommunityArticlesByStatusParams,
  Message,
  PaginatedArticlesResponse,
} from '.././schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Submit Article
 */
export const communitiesApiArticlesSubmitArticle = (
  communityName: string,
  articleSlug: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/communities/${communityName}/submit-article/${articleSlug}`,
      method: 'POST',
    },
    options
  );
};

export const getCommunitiesApiArticlesSubmitArticleMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesSubmitArticle>>,
    TError,
    { communityName: string; articleSlug: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiArticlesSubmitArticle>>,
  TError,
  { communityName: string; articleSlug: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesSubmitArticle>>,
    { communityName: string; articleSlug: string }
  > = (props) => {
    const { communityName, articleSlug } = props ?? {};

    return communitiesApiArticlesSubmitArticle(communityName, articleSlug, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiArticlesSubmitArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesSubmitArticle>>
>;

export type CommunitiesApiArticlesSubmitArticleMutationError = ErrorType<Message>;

/**
 * @summary Submit Article
 */
export const useCommunitiesApiArticlesSubmitArticle = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesSubmitArticle>>,
    TError,
    { communityName: string; articleSlug: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiArticlesSubmitArticle>>,
  TError,
  { communityName: string; articleSlug: string },
  TContext
> => {
  const mutationOptions = getCommunitiesApiArticlesSubmitArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary List articles in a community
 */
export const communitiesApiArticlesListCommunityArticlesByStatus = (
  communityName: string,
  params?: CommunitiesApiArticlesListCommunityArticlesByStatusParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedArticlesResponse>(
    {
      url: `/api/communities/communities/${communityName}/articles/`,
      method: 'GET',
      params,
      signal,
    },
    options
  );
};

export const getCommunitiesApiArticlesListCommunityArticlesByStatusQueryKey = (
  communityName: string,
  params?: CommunitiesApiArticlesListCommunityArticlesByStatusParams
) => {
  return [
    `/api/communities/communities/${communityName}/articles/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getCommunitiesApiArticlesListCommunityArticlesByStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesListCommunityArticlesByStatus>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  params?: CommunitiesApiArticlesListCommunityArticlesByStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesListCommunityArticlesByStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunitiesApiArticlesListCommunityArticlesByStatusQueryKey(communityName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesListCommunityArticlesByStatus>>
  > = ({ signal }) =>
    communitiesApiArticlesListCommunityArticlesByStatus(
      communityName,
      params,
      requestOptions,
      signal
    );

  return { queryKey, queryFn, enabled: !!communityName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesListCommunityArticlesByStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiArticlesListCommunityArticlesByStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesListCommunityArticlesByStatus>>
>;
export type CommunitiesApiArticlesListCommunityArticlesByStatusQueryError = ErrorType<Message>;

/**
 * @summary List articles in a community
 */
export const useCommunitiesApiArticlesListCommunityArticlesByStatus = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesListCommunityArticlesByStatus>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  params?: CommunitiesApiArticlesListCommunityArticlesByStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesListCommunityArticlesByStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiArticlesListCommunityArticlesByStatusQueryOptions(
    communityName,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Manage Article
 */
export const communitiesApiArticlesManageArticle = (
  communityId: number,
  articleId: number,
  action: 'approve' | 'reject' | 'publish',
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/communities/${communityId}/articles/${articleId}/${action}/`,
      method: 'POST',
    },
    options
  );
};

export const getCommunitiesApiArticlesManageArticleMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesManageArticle>>,
    TError,
    { communityId: number; articleId: number; action: 'approve' | 'reject' | 'publish' },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiArticlesManageArticle>>,
  TError,
  { communityId: number; articleId: number; action: 'approve' | 'reject' | 'publish' },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesManageArticle>>,
    { communityId: number; articleId: number; action: 'approve' | 'reject' | 'publish' }
  > = (props) => {
    const { communityId, articleId, action } = props ?? {};

    return communitiesApiArticlesManageArticle(communityId, articleId, action, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiArticlesManageArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesManageArticle>>
>;

export type CommunitiesApiArticlesManageArticleMutationError = ErrorType<Message>;

/**
 * @summary Manage Article
 */
export const useCommunitiesApiArticlesManageArticle = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesManageArticle>>,
    TError,
    { communityId: number; articleId: number; action: 'approve' | 'reject' | 'publish' },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiArticlesManageArticle>>,
  TError,
  { communityId: number; articleId: number; action: 'approve' | 'reject' | 'publish' },
  TContext
> => {
  const mutationOptions = getCommunitiesApiArticlesManageArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Article Status
 */
export const communitiesApiArticlesGetArticleStatus = (
  communityId: number,
  articleId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ArticleStatusSchema>(
    {
      url: `/api/communities/communities/${communityId}/community-articles/${articleId}/status/`,
      method: 'GET',
      signal,
    },
    options
  );
};

export const getCommunitiesApiArticlesGetArticleStatusQueryKey = (
  communityId: number,
  articleId: number
) => {
  return [
    `/api/communities/communities/${communityId}/community-articles/${articleId}/status/`,
  ] as const;
};

export const getCommunitiesApiArticlesGetArticleStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetArticleStatus>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetArticleStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunitiesApiArticlesGetArticleStatusQueryKey(communityId, articleId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesGetArticleStatus>>
  > = ({ signal }) =>
    communitiesApiArticlesGetArticleStatus(communityId, articleId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(communityId && articleId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesGetArticleStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiArticlesGetArticleStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesGetArticleStatus>>
>;
export type CommunitiesApiArticlesGetArticleStatusQueryError = ErrorType<Message>;

/**
 * @summary Get Article Status
 */
export const useCommunitiesApiArticlesGetArticleStatus = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetArticleStatus>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetArticleStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiArticlesGetArticleStatusQueryOptions(
    communityId,
    articleId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Assigned Articles
 */
export const communitiesApiArticlesGetAssignedArticles = (
  communityId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ArticleOut[]>(
    {
      url: `/api/communities/communities/${communityId}/assigned-articles/`,
      method: 'GET',
      signal,
    },
    options
  );
};

export const getCommunitiesApiArticlesGetAssignedArticlesQueryKey = (communityId: number) => {
  return [`/api/communities/communities/${communityId}/assigned-articles/`] as const;
};

export const getCommunitiesApiArticlesGetAssignedArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetAssignedArticles>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetAssignedArticles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommunitiesApiArticlesGetAssignedArticlesQueryKey(communityId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesGetAssignedArticles>>
  > = ({ signal }) =>
    communitiesApiArticlesGetAssignedArticles(communityId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!communityId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesGetAssignedArticles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiArticlesGetAssignedArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesGetAssignedArticles>>
>;
export type CommunitiesApiArticlesGetAssignedArticlesQueryError = ErrorType<Message>;

/**
 * @summary Get Assigned Articles
 */
export const useCommunitiesApiArticlesGetAssignedArticles = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetAssignedArticles>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetAssignedArticles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiArticlesGetAssignedArticlesQueryOptions(
    communityId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Assessment Details
 */
export const communitiesApiArticlesGetAssessmentDetails = (
  communityName: string,
  articleId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AssessorArticleSchema>(
    {
      url: `/api/communities/communities/${communityName}/community-articles/${articleId}/assessment/`,
      method: 'GET',
      signal,
    },
    options
  );
};

export const getCommunitiesApiArticlesGetAssessmentDetailsQueryKey = (
  communityName: string,
  articleId: number
) => {
  return [
    `/api/communities/communities/${communityName}/community-articles/${articleId}/assessment/`,
  ] as const;
};

export const getCommunitiesApiArticlesGetAssessmentDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetAssessmentDetails>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetAssessmentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunitiesApiArticlesGetAssessmentDetailsQueryKey(communityName, articleId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesGetAssessmentDetails>>
  > = ({ signal }) =>
    communitiesApiArticlesGetAssessmentDetails(communityName, articleId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(communityName && articleId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesGetAssessmentDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiArticlesGetAssessmentDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesGetAssessmentDetails>>
>;
export type CommunitiesApiArticlesGetAssessmentDetailsQueryError = ErrorType<Message>;

/**
 * @summary Get Assessment Details
 */
export const useCommunitiesApiArticlesGetAssessmentDetails = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetAssessmentDetails>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetAssessmentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiArticlesGetAssessmentDetailsQueryOptions(
    communityName,
    articleId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Submit Assessment
 */
export const communitiesApiArticlesSubmitAssessment = (
  communityId: number,
  articleId: number,
  assessmentSubmissionSchema: BodyType<AssessmentSubmissionSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/communities/${communityId}/community-articles/${articleId}/submit-assessment/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: assessmentSubmissionSchema,
    },
    options
  );
};

export const getCommunitiesApiArticlesSubmitAssessmentMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesSubmitAssessment>>,
    TError,
    { communityId: number; articleId: number; data: BodyType<AssessmentSubmissionSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiArticlesSubmitAssessment>>,
  TError,
  { communityId: number; articleId: number; data: BodyType<AssessmentSubmissionSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesSubmitAssessment>>,
    { communityId: number; articleId: number; data: BodyType<AssessmentSubmissionSchema> }
  > = (props) => {
    const { communityId, articleId, data } = props ?? {};

    return communitiesApiArticlesSubmitAssessment(communityId, articleId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiArticlesSubmitAssessmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesSubmitAssessment>>
>;
export type CommunitiesApiArticlesSubmitAssessmentMutationBody =
  BodyType<AssessmentSubmissionSchema>;
export type CommunitiesApiArticlesSubmitAssessmentMutationError = ErrorType<Message>;

/**
 * @summary Submit Assessment
 */
export const useCommunitiesApiArticlesSubmitAssessment = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesSubmitAssessment>>,
    TError,
    { communityId: number; articleId: number; data: BodyType<AssessmentSubmissionSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiArticlesSubmitAssessment>>,
  TError,
  { communityId: number; articleId: number; data: BodyType<AssessmentSubmissionSchema> },
  TContext
> => {
  const mutationOptions = getCommunitiesApiArticlesSubmitAssessmentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Article Assessors
 */
export const communitiesApiArticlesGetArticleAssessors = (
  communityId: number,
  articleId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AssessorSchema[]>(
    {
      url: `/api/communities/communities/${communityId}/articles/${articleId}/assessors/`,
      method: 'GET',
      signal,
    },
    options
  );
};

export const getCommunitiesApiArticlesGetArticleAssessorsQueryKey = (
  communityId: number,
  articleId: number
) => {
  return [`/api/communities/communities/${communityId}/articles/${articleId}/assessors/`] as const;
};

export const getCommunitiesApiArticlesGetArticleAssessorsQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetArticleAssessors>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetArticleAssessors>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunitiesApiArticlesGetArticleAssessorsQueryKey(communityId, articleId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesGetArticleAssessors>>
  > = ({ signal }) =>
    communitiesApiArticlesGetArticleAssessors(communityId, articleId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(communityId && articleId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesGetArticleAssessors>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiArticlesGetArticleAssessorsQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesGetArticleAssessors>>
>;
export type CommunitiesApiArticlesGetArticleAssessorsQueryError = ErrorType<Message>;

/**
 * @summary Get Article Assessors
 */
export const useCommunitiesApiArticlesGetArticleAssessors = <
  TData = Awaited<ReturnType<typeof communitiesApiArticlesGetArticleAssessors>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  articleId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiArticlesGetArticleAssessors>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiArticlesGetArticleAssessorsQueryOptions(
    communityId,
    articleId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Manually Assign Assessors
 */
export const communitiesApiArticlesManuallyAssignAssessors = (
  communityId: number,
  articleId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/communities/${communityId}/articles/${articleId}/assign-assessors/`,
      method: 'POST',
    },
    options
  );
};

export const getCommunitiesApiArticlesManuallyAssignAssessorsMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesManuallyAssignAssessors>>,
    TError,
    { communityId: number; articleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiArticlesManuallyAssignAssessors>>,
  TError,
  { communityId: number; articleId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesManuallyAssignAssessors>>,
    { communityId: number; articleId: number }
  > = (props) => {
    const { communityId, articleId } = props ?? {};

    return communitiesApiArticlesManuallyAssignAssessors(communityId, articleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiArticlesManuallyAssignAssessorsMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesManuallyAssignAssessors>>
>;

export type CommunitiesApiArticlesManuallyAssignAssessorsMutationError = ErrorType<Message>;

/**
 * @summary Manually Assign Assessors
 */
export const useCommunitiesApiArticlesManuallyAssignAssessors = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesManuallyAssignAssessors>>,
    TError,
    { communityId: number; articleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiArticlesManuallyAssignAssessors>>,
  TError,
  { communityId: number; articleId: number },
  TContext
> => {
  const mutationOptions = getCommunitiesApiArticlesManuallyAssignAssessorsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Check Assessments
 */
export const communitiesApiArticlesCheckAssessments = (
  communityId: number,
  articleId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/communities/${communityId}/articles/${articleId}/check-assessments/`,
      method: 'POST',
    },
    options
  );
};

export const getCommunitiesApiArticlesCheckAssessmentsMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesCheckAssessments>>,
    TError,
    { communityId: number; articleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiArticlesCheckAssessments>>,
  TError,
  { communityId: number; articleId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiArticlesCheckAssessments>>,
    { communityId: number; articleId: number }
  > = (props) => {
    const { communityId, articleId } = props ?? {};

    return communitiesApiArticlesCheckAssessments(communityId, articleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiArticlesCheckAssessmentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiArticlesCheckAssessments>>
>;

export type CommunitiesApiArticlesCheckAssessmentsMutationError = ErrorType<Message>;

/**
 * @summary Check Assessments
 */
export const useCommunitiesApiArticlesCheckAssessments = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiArticlesCheckAssessments>>,
    TError,
    { communityId: number; articleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiArticlesCheckAssessments>>,
  TError,
  { communityId: number; articleId: number },
  TContext
> => {
  const mutationOptions = getCommunitiesApiArticlesCheckAssessmentsMutationOptions(options);

  return useMutation(mutationOptions);
};
