/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  CommentIn,
  CommunityPostDetailOut,
  CommunityPostOut,
  CreatePostSchema,
  UpdatePostSchema,
} from '.././schemas';

/**
 * @summary List Community Posts
 */
export const communitiesPostsCommentsApiListCommunityPosts = (
  communityId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CommunityPostOut[]>> => {
  return axios.get(`http://localhost:8000/api/communities/${communityId}/posts/`, options);
};

export const getCommunitiesPostsCommentsApiListCommunityPostsQueryKey = (communityId: number) => {
  return [`http://localhost:8000/api/communities/${communityId}/posts/`] as const;
};

export const getCommunitiesPostsCommentsApiListCommunityPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesPostsCommentsApiListCommunityPosts>>,
  TError = AxiosError<unknown>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesPostsCommentsApiListCommunityPosts>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommunitiesPostsCommentsApiListCommunityPostsQueryKey(communityId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiListCommunityPosts>>
  > = ({ signal }) =>
    communitiesPostsCommentsApiListCommunityPosts(communityId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!communityId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiListCommunityPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesPostsCommentsApiListCommunityPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiListCommunityPosts>>
>;
export type CommunitiesPostsCommentsApiListCommunityPostsQueryError = AxiosError<unknown>;

/**
 * @summary List Community Posts
 */
export const useCommunitiesPostsCommentsApiListCommunityPosts = <
  TData = Awaited<ReturnType<typeof communitiesPostsCommentsApiListCommunityPosts>>,
  TError = AxiosError<unknown>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesPostsCommentsApiListCommunityPosts>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesPostsCommentsApiListCommunityPostsQueryOptions(
    communityId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Community Post
 */
export const communitiesPostsCommentsApiCreateCommunityPost = (
  communityId: number,
  createPostSchema: CreatePostSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:8000/api/communities/${communityId}/posts/`,
    createPostSchema,
    options
  );
};

export const getCommunitiesPostsCommentsApiCreateCommunityPostMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiCreateCommunityPost>>,
    TError,
    { communityId: number; data: CreatePostSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiCreateCommunityPost>>,
  TError,
  { communityId: number; data: CreatePostSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiCreateCommunityPost>>,
    { communityId: number; data: CreatePostSchema }
  > = (props) => {
    const { communityId, data } = props ?? {};

    return communitiesPostsCommentsApiCreateCommunityPost(communityId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesPostsCommentsApiCreateCommunityPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiCreateCommunityPost>>
>;
export type CommunitiesPostsCommentsApiCreateCommunityPostMutationBody = CreatePostSchema;
export type CommunitiesPostsCommentsApiCreateCommunityPostMutationError = AxiosError<unknown>;

/**
 * @summary Create Community Post
 */
export const useCommunitiesPostsCommentsApiCreateCommunityPost = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiCreateCommunityPost>>,
    TError,
    { communityId: number; data: CreatePostSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiCreateCommunityPost>>,
  TError,
  { communityId: number; data: CreatePostSchema },
  TContext
> => {
  const mutationOptions = getCommunitiesPostsCommentsApiCreateCommunityPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Retrieve Post
 */
export const communitiesPostsCommentsApiRetrievePost = (
  postId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CommunityPostDetailOut>> => {
  return axios.get(`http://localhost:8000/api/communities/posts/${postId}/`, options);
};

export const getCommunitiesPostsCommentsApiRetrievePostQueryKey = (postId: number) => {
  return [`http://localhost:8000/api/communities/posts/${postId}/`] as const;
};

export const getCommunitiesPostsCommentsApiRetrievePostQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesPostsCommentsApiRetrievePost>>,
  TError = AxiosError<unknown>,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesPostsCommentsApiRetrievePost>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCommunitiesPostsCommentsApiRetrievePostQueryKey(postId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiRetrievePost>>
  > = ({ signal }) => communitiesPostsCommentsApiRetrievePost(postId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!postId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiRetrievePost>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesPostsCommentsApiRetrievePostQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiRetrievePost>>
>;
export type CommunitiesPostsCommentsApiRetrievePostQueryError = AxiosError<unknown>;

/**
 * @summary Retrieve Post
 */
export const useCommunitiesPostsCommentsApiRetrievePost = <
  TData = Awaited<ReturnType<typeof communitiesPostsCommentsApiRetrievePost>>,
  TError = AxiosError<unknown>,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesPostsCommentsApiRetrievePost>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesPostsCommentsApiRetrievePostQueryOptions(postId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update Community Post
 */
export const communitiesPostsCommentsApiUpdateCommunityPost = (
  postId: number,
  updatePostSchema: UpdatePostSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(
    `http://localhost:8000/api/communities/posts/${postId}/`,
    updatePostSchema,
    options
  );
};

export const getCommunitiesPostsCommentsApiUpdateCommunityPostMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateCommunityPost>>,
    TError,
    { postId: number; data: UpdatePostSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateCommunityPost>>,
  TError,
  { postId: number; data: UpdatePostSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateCommunityPost>>,
    { postId: number; data: UpdatePostSchema }
  > = (props) => {
    const { postId, data } = props ?? {};

    return communitiesPostsCommentsApiUpdateCommunityPost(postId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesPostsCommentsApiUpdateCommunityPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateCommunityPost>>
>;
export type CommunitiesPostsCommentsApiUpdateCommunityPostMutationBody = UpdatePostSchema;
export type CommunitiesPostsCommentsApiUpdateCommunityPostMutationError = AxiosError<unknown>;

/**
 * @summary Update Community Post
 */
export const useCommunitiesPostsCommentsApiUpdateCommunityPost = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateCommunityPost>>,
    TError,
    { postId: number; data: UpdatePostSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateCommunityPost>>,
  TError,
  { postId: number; data: UpdatePostSchema },
  TContext
> => {
  const mutationOptions = getCommunitiesPostsCommentsApiUpdateCommunityPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Community Post
 */
export const communitiesPostsCommentsApiDeleteCommunityPost = (
  postId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`http://localhost:8000/api/communities/posts/${postId}/`, options);
};

export const getCommunitiesPostsCommentsApiDeleteCommunityPostMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteCommunityPost>>,
    TError,
    { postId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteCommunityPost>>,
  TError,
  { postId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteCommunityPost>>,
    { postId: number }
  > = (props) => {
    const { postId } = props ?? {};

    return communitiesPostsCommentsApiDeleteCommunityPost(postId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesPostsCommentsApiDeleteCommunityPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteCommunityPost>>
>;

export type CommunitiesPostsCommentsApiDeleteCommunityPostMutationError = AxiosError<unknown>;

/**
 * @summary Delete Community Post
 */
export const useCommunitiesPostsCommentsApiDeleteCommunityPost = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteCommunityPost>>,
    TError,
    { postId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteCommunityPost>>,
  TError,
  { postId: number },
  TContext
> => {
  const mutationOptions = getCommunitiesPostsCommentsApiDeleteCommunityPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Add Comment To Post
 */
export const communitiesPostsCommentsApiAddCommentToPost = (
  postId: number,
  commentIn: CommentIn,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:8000/api/communities/posts/${postId}/comments/`,
    commentIn,
    options
  );
};

export const getCommunitiesPostsCommentsApiAddCommentToPostMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiAddCommentToPost>>,
    TError,
    { postId: number; data: CommentIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiAddCommentToPost>>,
  TError,
  { postId: number; data: CommentIn },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiAddCommentToPost>>,
    { postId: number; data: CommentIn }
  > = (props) => {
    const { postId, data } = props ?? {};

    return communitiesPostsCommentsApiAddCommentToPost(postId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesPostsCommentsApiAddCommentToPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiAddCommentToPost>>
>;
export type CommunitiesPostsCommentsApiAddCommentToPostMutationBody = CommentIn;
export type CommunitiesPostsCommentsApiAddCommentToPostMutationError = AxiosError<unknown>;

/**
 * @summary Add Comment To Post
 */
export const useCommunitiesPostsCommentsApiAddCommentToPost = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiAddCommentToPost>>,
    TError,
    { postId: number; data: CommentIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiAddCommentToPost>>,
  TError,
  { postId: number; data: CommentIn },
  TContext
> => {
  const mutationOptions = getCommunitiesPostsCommentsApiAddCommentToPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update Comment
 */
export const communitiesPostsCommentsApiUpdateComment = (
  commentId: number,
  commentIn: CommentIn,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.patch(
    `http://localhost:8000/api/communities/comments/${commentId}/`,
    commentIn,
    options
  );
};

export const getCommunitiesPostsCommentsApiUpdateCommentMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateComment>>,
    TError,
    { commentId: number; data: CommentIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateComment>>,
  TError,
  { commentId: number; data: CommentIn },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateComment>>,
    { commentId: number; data: CommentIn }
  > = (props) => {
    const { commentId, data } = props ?? {};

    return communitiesPostsCommentsApiUpdateComment(commentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesPostsCommentsApiUpdateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateComment>>
>;
export type CommunitiesPostsCommentsApiUpdateCommentMutationBody = CommentIn;
export type CommunitiesPostsCommentsApiUpdateCommentMutationError = AxiosError<string>;

/**
 * @summary Update Comment
 */
export const useCommunitiesPostsCommentsApiUpdateComment = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateComment>>,
    TError,
    { commentId: number; data: CommentIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiUpdateComment>>,
  TError,
  { commentId: number; data: CommentIn },
  TContext
> => {
  const mutationOptions = getCommunitiesPostsCommentsApiUpdateCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Comment
 */
export const communitiesPostsCommentsApiDeleteComment = (
  commentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.delete(`http://localhost:8000/api/communities/comments/${commentId}/`, options);
};

export const getCommunitiesPostsCommentsApiDeleteCommentMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteComment>>,
    TError,
    { commentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteComment>>,
  TError,
  { commentId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteComment>>,
    { commentId: number }
  > = (props) => {
    const { commentId } = props ?? {};

    return communitiesPostsCommentsApiDeleteComment(commentId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesPostsCommentsApiDeleteCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteComment>>
>;

export type CommunitiesPostsCommentsApiDeleteCommentMutationError = AxiosError<string>;

/**
 * @summary Delete Comment
 */
export const useCommunitiesPostsCommentsApiDeleteComment = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteComment>>,
    TError,
    { commentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesPostsCommentsApiDeleteComment>>,
  TError,
  { commentId: number },
  TContext
> => {
  const mutationOptions = getCommunitiesPostsCommentsApiDeleteCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
