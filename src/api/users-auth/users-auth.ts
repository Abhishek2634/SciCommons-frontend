/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  EmailSchema,
  LogInSchemaIn,
  LogInSchemaOut,
  SignUpSchemaIn,
  StatusMessageSchema,
  UsersApiAuthResetPasswordParams,
} from '.././schemas';

/**
 * @summary Signup
 */
export const usersApiAuthSignup = (
  signUpSchemaIn: SignUpSchemaIn,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<StatusMessageSchema>> => {
  return axios.post(`http://localhost:8000/api/users/signup`, signUpSchemaIn, options);
};

export const getUsersApiAuthSignupMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthSignup>>,
    TError,
    { data: SignUpSchemaIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthSignup>>,
  TError,
  { data: SignUpSchemaIn },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthSignup>>,
    { data: SignUpSchemaIn }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthSignup(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthSignup>>
>;
export type UsersApiAuthSignupMutationBody = SignUpSchemaIn;
export type UsersApiAuthSignupMutationError = AxiosError<unknown>;

/**
 * @summary Signup
 */
export const useUsersApiAuthSignup = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthSignup>>,
    TError,
    { data: SignUpSchemaIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthSignup>>,
  TError,
  { data: SignUpSchemaIn },
  TContext
> => {
  const mutationOptions = getUsersApiAuthSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Activate
 */
export const usersApiAuthActivate = (
  token: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<StatusMessageSchema>> => {
  return axios.get(`http://localhost:8000/api/users/activate/${token}`, options);
};

export const getUsersApiAuthActivateQueryKey = (token: string) => {
  return [`http://localhost:8000/api/users/activate/${token}`] as const;
};

export const getUsersApiAuthActivateQueryOptions = <
  TData = Awaited<ReturnType<typeof usersApiAuthActivate>>,
  TError = AxiosError<unknown>,
>(
  token: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersApiAuthActivate>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersApiAuthActivateQueryKey(token);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersApiAuthActivate>>> = ({ signal }) =>
    usersApiAuthActivate(token, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!token, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersApiAuthActivate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersApiAuthActivateQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthActivate>>
>;
export type UsersApiAuthActivateQueryError = AxiosError<unknown>;

/**
 * @summary Activate
 */
export const useUsersApiAuthActivate = <
  TData = Awaited<ReturnType<typeof usersApiAuthActivate>>,
  TError = AxiosError<unknown>,
>(
  token: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersApiAuthActivate>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersApiAuthActivateQueryOptions(token, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Resend Activation
 */
export const usersApiAuthResendActivation = (
  emailSchema: EmailSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<StatusMessageSchema>> => {
  return axios.post(`http://localhost:8000/api/users/resend-activation`, emailSchema, options);
};

export const getUsersApiAuthResendActivationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
    TError,
    { data: EmailSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
  TError,
  { data: EmailSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
    { data: EmailSchema }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthResendActivation(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthResendActivationMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthResendActivation>>
>;
export type UsersApiAuthResendActivationMutationBody = EmailSchema;
export type UsersApiAuthResendActivationMutationError = AxiosError<unknown>;

/**
 * @summary Resend Activation
 */
export const useUsersApiAuthResendActivation = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
    TError,
    { data: EmailSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
  TError,
  { data: EmailSchema },
  TContext
> => {
  const mutationOptions = getUsersApiAuthResendActivationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Login User
 */
export const usersApiAuthLoginUser = (
  logInSchemaIn: LogInSchemaIn,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LogInSchemaOut>> => {
  return axios.post(`http://localhost:8000/api/users/login`, logInSchemaIn, options);
};

export const getUsersApiAuthLoginUserMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
    TError,
    { data: LogInSchemaIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
  TError,
  { data: LogInSchemaIn },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
    { data: LogInSchemaIn }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthLoginUser(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthLoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthLoginUser>>
>;
export type UsersApiAuthLoginUserMutationBody = LogInSchemaIn;
export type UsersApiAuthLoginUserMutationError = AxiosError<unknown>;

/**
 * @summary Login User
 */
export const useUsersApiAuthLoginUser = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
    TError,
    { data: LogInSchemaIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
  TError,
  { data: LogInSchemaIn },
  TContext
> => {
  const mutationOptions = getUsersApiAuthLoginUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Request Reset
 */
export const usersApiAuthRequestReset = (
  emailSchema: EmailSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<StatusMessageSchema>> => {
  return axios.post(`http://localhost:8000/api/users/forgot-password`, emailSchema, options);
};

export const getUsersApiAuthRequestResetMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
    TError,
    { data: EmailSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
  TError,
  { data: EmailSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
    { data: EmailSchema }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthRequestReset(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthRequestResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthRequestReset>>
>;
export type UsersApiAuthRequestResetMutationBody = EmailSchema;
export type UsersApiAuthRequestResetMutationError = AxiosError<unknown>;

/**
 * @summary Request Reset
 */
export const useUsersApiAuthRequestReset = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
    TError,
    { data: EmailSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
  TError,
  { data: EmailSchema },
  TContext
> => {
  const mutationOptions = getUsersApiAuthRequestResetMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Reset Password
 */
export const usersApiAuthResetPassword = (
  params: UsersApiAuthResetPasswordParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`http://localhost:8000/api/users/reset-password`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getUsersApiAuthResetPasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
    TError,
    { params: UsersApiAuthResetPasswordParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
  TError,
  { params: UsersApiAuthResetPasswordParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
    { params: UsersApiAuthResetPasswordParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersApiAuthResetPassword(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthResetPassword>>
>;

export type UsersApiAuthResetPasswordMutationError = AxiosError<unknown>;

/**
 * @summary Reset Password
 */
export const useUsersApiAuthResetPassword = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
    TError,
    { params: UsersApiAuthResetPasswordParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
  TError,
  { params: UsersApiAuthResetPasswordParams },
  TContext
> => {
  const mutationOptions = getUsersApiAuthResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
