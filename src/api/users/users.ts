/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  ArticleDetails,
  Message,
  NotificationSchema,
  UsersApiGetMyArticlesParams,
} from '.././schemas';

/**
 * @summary Get My Articles
 */
export const usersApiGetMyArticles = (
  params?: UsersApiGetMyArticlesParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ArticleDetails[]>> => {
  return axios.get(`http://localhost:8000/api/users/my-articles`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getUsersApiGetMyArticlesQueryKey = (params?: UsersApiGetMyArticlesParams) => {
  return [`http://localhost:8000/api/users/my-articles`, ...(params ? [params] : [])] as const;
};

export const getUsersApiGetMyArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof usersApiGetMyArticles>>,
  TError = AxiosError<Message>,
>(
  params?: UsersApiGetMyArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersApiGetMyArticles>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersApiGetMyArticlesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersApiGetMyArticles>>> = ({ signal }) =>
    usersApiGetMyArticles(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersApiGetMyArticles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersApiGetMyArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersApiGetMyArticles>>
>;
export type UsersApiGetMyArticlesQueryError = AxiosError<Message>;

/**
 * @summary Get My Articles
 */
export const useUsersApiGetMyArticles = <
  TData = Awaited<ReturnType<typeof usersApiGetMyArticles>>,
  TError = AxiosError<Message>,
>(
  params?: UsersApiGetMyArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersApiGetMyArticles>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersApiGetMyArticlesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Notifications
 */
export const usersApiGetNotifications = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NotificationSchema[]>> => {
  return axios.get(`http://localhost:8000/api/users/notifications`, options);
};

export const getUsersApiGetNotificationsQueryKey = () => {
  return [`http://localhost:8000/api/users/notifications`] as const;
};

export const getUsersApiGetNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof usersApiGetNotifications>>,
  TError = AxiosError<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersApiGetNotifications>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersApiGetNotificationsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersApiGetNotifications>>> = ({
    signal,
  }) => usersApiGetNotifications({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersApiGetNotifications>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersApiGetNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersApiGetNotifications>>
>;
export type UsersApiGetNotificationsQueryError = AxiosError<Message>;

/**
 * @summary Get Notifications
 */
export const useUsersApiGetNotifications = <
  TData = Awaited<ReturnType<typeof usersApiGetNotifications>>,
  TError = AxiosError<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersApiGetNotifications>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersApiGetNotificationsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Mark Notification As Read
 */
export const usersApiMarkNotificationAsRead = (
  notificationId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Message>> => {
  return axios.post(
    `http://localhost:8000/api/users/notifications/${notificationId}/mark-as-read`,
    undefined,
    options
  );
};

export const getUsersApiMarkNotificationAsReadMutationOptions = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiMarkNotificationAsRead>>,
    TError,
    { notificationId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiMarkNotificationAsRead>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiMarkNotificationAsRead>>,
    { notificationId: number }
  > = (props) => {
    const { notificationId } = props ?? {};

    return usersApiMarkNotificationAsRead(notificationId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiMarkNotificationAsReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiMarkNotificationAsRead>>
>;

export type UsersApiMarkNotificationAsReadMutationError = AxiosError<Message>;

/**
 * @summary Mark Notification As Read
 */
export const useUsersApiMarkNotificationAsRead = <
  TError = AxiosError<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiMarkNotificationAsRead>>,
    TError,
    { notificationId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiMarkNotificationAsRead>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const mutationOptions = getUsersApiMarkNotificationAsReadMutationOptions(options);

  return useMutation(mutationOptions);
};
