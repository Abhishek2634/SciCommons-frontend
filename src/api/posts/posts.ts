/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  CommentCreateSchema,
  CommentOut,
  CommentUpdateSchema,
  Message,
  PaginatedPostsResponse,
  PostCreateSchema,
  PostOut,
  PostsApiListPostsParams,
  ReactionSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Create Post
 */
export const postsApiCreatePost = (
  postCreateSchema: BodyType<PostCreateSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PostOut>(
    {
      url: `/api/posts/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postCreateSchema,
    },
    options
  );
};

export const getPostsApiCreatePostMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiCreatePost>>,
    TError,
    { data: BodyType<PostCreateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiCreatePost>>,
  TError,
  { data: BodyType<PostCreateSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiCreatePost>>,
    { data: BodyType<PostCreateSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return postsApiCreatePost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiCreatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiCreatePost>>
>;
export type PostsApiCreatePostMutationBody = BodyType<PostCreateSchema>;
export type PostsApiCreatePostMutationError = ErrorType<Message>;

/**
 * @summary Create Post
 */
export const usePostsApiCreatePost = <TError = ErrorType<Message>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiCreatePost>>,
    TError,
    { data: BodyType<PostCreateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiCreatePost>>,
  TError,
  { data: BodyType<PostCreateSchema> },
  TContext
> => {
  const mutationOptions = getPostsApiCreatePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary List Posts
 */
export const postsApiListPosts = (
  params?: PostsApiListPostsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedPostsResponse>(
    { url: `/api/posts/`, method: 'GET', params, signal },
    options
  );
};

export const getPostsApiListPostsQueryKey = (params?: PostsApiListPostsParams) => {
  return [`/api/posts/`, ...(params ? [params] : [])] as const;
};

export const getPostsApiListPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof postsApiListPosts>>,
  TError = ErrorType<Message>,
>(
  params?: PostsApiListPostsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postsApiListPosts>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostsApiListPostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof postsApiListPosts>>> = ({ signal }) =>
    postsApiListPosts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof postsApiListPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PostsApiListPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof postsApiListPosts>>
>;
export type PostsApiListPostsQueryError = ErrorType<Message>;

/**
 * @summary List Posts
 */
export const usePostsApiListPosts = <
  TData = Awaited<ReturnType<typeof postsApiListPosts>>,
  TError = ErrorType<Message>,
>(
  params?: PostsApiListPostsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postsApiListPosts>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPostsApiListPostsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Post
 */
export const postsApiGetPost = (
  postId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PostOut>({ url: `/api/posts/${postId}/`, method: 'GET', signal }, options);
};

export const getPostsApiGetPostQueryKey = (postId: number) => {
  return [`/api/posts/${postId}/`] as const;
};

export const getPostsApiGetPostQueryOptions = <
  TData = Awaited<ReturnType<typeof postsApiGetPost>>,
  TError = ErrorType<Message>,
>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postsApiGetPost>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostsApiGetPostQueryKey(postId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof postsApiGetPost>>> = ({ signal }) =>
    postsApiGetPost(postId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!postId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof postsApiGetPost>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PostsApiGetPostQueryResult = NonNullable<Awaited<ReturnType<typeof postsApiGetPost>>>;
export type PostsApiGetPostQueryError = ErrorType<Message>;

/**
 * @summary Get Post
 */
export const usePostsApiGetPost = <
  TData = Awaited<ReturnType<typeof postsApiGetPost>>,
  TError = ErrorType<Message>,
>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof postsApiGetPost>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPostsApiGetPostQueryOptions(postId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Delete Post
 */
export const postsApiDeletePost = (
  postId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/api/posts/${postId}/`, method: 'DELETE' }, options);
};

export const getPostsApiDeletePostMutationOptions = <
  TError = ErrorType<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiDeletePost>>,
    TError,
    { postId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiDeletePost>>,
  TError,
  { postId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiDeletePost>>,
    { postId: number }
  > = (props) => {
    const { postId } = props ?? {};

    return postsApiDeletePost(postId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiDeletePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiDeletePost>>
>;

export type PostsApiDeletePostMutationError = ErrorType<string>;

/**
 * @summary Delete Post
 */
export const usePostsApiDeletePost = <TError = ErrorType<string>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiDeletePost>>,
    TError,
    { postId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiDeletePost>>,
  TError,
  { postId: number },
  TContext
> => {
  const mutationOptions = getPostsApiDeletePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update Post
 */
export const postsApiUpdatePost = (
  postId: number,
  postCreateSchema: BodyType<PostCreateSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PostOut>(
    {
      url: `/api/posts/${postId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: postCreateSchema,
    },
    options
  );
};

export const getPostsApiUpdatePostMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiUpdatePost>>,
    TError,
    { postId: number; data: BodyType<PostCreateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiUpdatePost>>,
  TError,
  { postId: number; data: BodyType<PostCreateSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiUpdatePost>>,
    { postId: number; data: BodyType<PostCreateSchema> }
  > = (props) => {
    const { postId, data } = props ?? {};

    return postsApiUpdatePost(postId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiUpdatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiUpdatePost>>
>;
export type PostsApiUpdatePostMutationBody = BodyType<PostCreateSchema>;
export type PostsApiUpdatePostMutationError = ErrorType<Message>;

/**
 * @summary Update Post
 */
export const usePostsApiUpdatePost = <TError = ErrorType<Message>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiUpdatePost>>,
    TError,
    { postId: number; data: BodyType<PostCreateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiUpdatePost>>,
  TError,
  { postId: number; data: BodyType<PostCreateSchema> },
  TContext
> => {
  const mutationOptions = getPostsApiUpdatePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary List Post Comments
 */
export const postsApiListPostComments = (
  postId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CommentOut[]>(
    { url: `/api/posts/${postId}/comments/`, method: 'GET', signal },
    options
  );
};

export const getPostsApiListPostCommentsQueryKey = (postId: number) => {
  return [`/api/posts/${postId}/comments/`] as const;
};

export const getPostsApiListPostCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof postsApiListPostComments>>,
  TError = ErrorType<unknown>,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsApiListPostComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostsApiListPostCommentsQueryKey(postId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof postsApiListPostComments>>> = ({
    signal,
  }) => postsApiListPostComments(postId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!postId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof postsApiListPostComments>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PostsApiListPostCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof postsApiListPostComments>>
>;
export type PostsApiListPostCommentsQueryError = ErrorType<unknown>;

/**
 * @summary List Post Comments
 */
export const usePostsApiListPostComments = <
  TData = Awaited<ReturnType<typeof postsApiListPostComments>>,
  TError = ErrorType<unknown>,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsApiListPostComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPostsApiListPostCommentsQueryOptions(postId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Comment
 */
export const postsApiCreateComment = (
  postId: number,
  commentCreateSchema: BodyType<CommentCreateSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CommentOut>(
    {
      url: `/api/posts/${postId}/comments/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: commentCreateSchema,
    },
    options
  );
};

export const getPostsApiCreateCommentMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiCreateComment>>,
    TError,
    { postId: number; data: BodyType<CommentCreateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiCreateComment>>,
  TError,
  { postId: number; data: BodyType<CommentCreateSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiCreateComment>>,
    { postId: number; data: BodyType<CommentCreateSchema> }
  > = (props) => {
    const { postId, data } = props ?? {};

    return postsApiCreateComment(postId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiCreateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiCreateComment>>
>;
export type PostsApiCreateCommentMutationBody = BodyType<CommentCreateSchema>;
export type PostsApiCreateCommentMutationError = ErrorType<unknown>;

/**
 * @summary Create Comment
 */
export const usePostsApiCreateComment = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiCreateComment>>,
    TError,
    { postId: number; data: BodyType<CommentCreateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiCreateComment>>,
  TError,
  { postId: number; data: BodyType<CommentCreateSchema> },
  TContext
> => {
  const mutationOptions = getPostsApiCreateCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary React To Post
 */
export const postsApiReactToPost = (
  postId: number,
  reactionSchema: BodyType<ReactionSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ReactionSchema>(
    {
      url: `/api/posts/${postId}/reactions/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: reactionSchema,
    },
    options
  );
};

export const getPostsApiReactToPostMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiReactToPost>>,
    TError,
    { postId: number; data: BodyType<ReactionSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiReactToPost>>,
  TError,
  { postId: number; data: BodyType<ReactionSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiReactToPost>>,
    { postId: number; data: BodyType<ReactionSchema> }
  > = (props) => {
    const { postId, data } = props ?? {};

    return postsApiReactToPost(postId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiReactToPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiReactToPost>>
>;
export type PostsApiReactToPostMutationBody = BodyType<ReactionSchema>;
export type PostsApiReactToPostMutationError = ErrorType<Message>;

/**
 * @summary React To Post
 */
export const usePostsApiReactToPost = <TError = ErrorType<Message>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiReactToPost>>,
    TError,
    { postId: number; data: BodyType<ReactionSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiReactToPost>>,
  TError,
  { postId: number; data: BodyType<ReactionSchema> },
  TContext
> => {
  const mutationOptions = getPostsApiReactToPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update Comment
 */
export const postsApiUpdateComment = (
  commentId: number,
  commentUpdateSchema: BodyType<CommentUpdateSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/posts/comments/${commentId}/`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: commentUpdateSchema,
    },
    options
  );
};

export const getPostsApiUpdateCommentMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiUpdateComment>>,
    TError,
    { commentId: number; data: BodyType<CommentUpdateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiUpdateComment>>,
  TError,
  { commentId: number; data: BodyType<CommentUpdateSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiUpdateComment>>,
    { commentId: number; data: BodyType<CommentUpdateSchema> }
  > = (props) => {
    const { commentId, data } = props ?? {};

    return postsApiUpdateComment(commentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiUpdateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiUpdateComment>>
>;
export type PostsApiUpdateCommentMutationBody = BodyType<CommentUpdateSchema>;
export type PostsApiUpdateCommentMutationError = ErrorType<Message>;

/**
 * @summary Update Comment
 */
export const usePostsApiUpdateComment = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiUpdateComment>>,
    TError,
    { commentId: number; data: BodyType<CommentUpdateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiUpdateComment>>,
  TError,
  { commentId: number; data: BodyType<CommentUpdateSchema> },
  TContext
> => {
  const mutationOptions = getPostsApiUpdateCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Comment
 */
export const postsApiDeleteComment = (
  commentId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/posts/comments/${commentId}/`, method: 'DELETE' },
    options
  );
};

export const getPostsApiDeleteCommentMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiDeleteComment>>,
    TError,
    { commentId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiDeleteComment>>,
  TError,
  { commentId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiDeleteComment>>,
    { commentId: number }
  > = (props) => {
    const { commentId } = props ?? {};

    return postsApiDeleteComment(commentId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiDeleteCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiDeleteComment>>
>;

export type PostsApiDeleteCommentMutationError = ErrorType<Message>;

/**
 * @summary Delete Comment
 */
export const usePostsApiDeleteComment = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiDeleteComment>>,
    TError,
    { commentId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiDeleteComment>>,
  TError,
  { commentId: number },
  TContext
> => {
  const mutationOptions = getPostsApiDeleteCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary React To Comment
 */
export const postsApiReactToComment = (
  commentId: number,
  reactionSchema: BodyType<ReactionSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ReactionSchema>(
    {
      url: `/api/posts/comments/${commentId}/reactions/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: reactionSchema,
    },
    options
  );
};

export const getPostsApiReactToCommentMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiReactToComment>>,
    TError,
    { commentId: number; data: BodyType<ReactionSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsApiReactToComment>>,
  TError,
  { commentId: number; data: BodyType<ReactionSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsApiReactToComment>>,
    { commentId: number; data: BodyType<ReactionSchema> }
  > = (props) => {
    const { commentId, data } = props ?? {};

    return postsApiReactToComment(commentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsApiReactToCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsApiReactToComment>>
>;
export type PostsApiReactToCommentMutationBody = BodyType<ReactionSchema>;
export type PostsApiReactToCommentMutationError = ErrorType<Message>;

/**
 * @summary React To Comment
 */
export const usePostsApiReactToComment = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsApiReactToComment>>,
    TError,
    { commentId: number; data: BodyType<ReactionSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postsApiReactToComment>>,
  TError,
  { commentId: number; data: BodyType<ReactionSchema> },
  TContext
> => {
  const mutationOptions = getPostsApiReactToCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
